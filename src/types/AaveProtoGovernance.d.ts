/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface AaveProtoGovernanceInterface extends ethers.utils.Interface {
  functions: {
    'COUNT_CHOICES()': FunctionFragment
    'MAX_MAXMOVESTOVOTINGALLOWED()': FunctionFragment
    'MIN_MAXMOVESTOVOTINGALLOWED()': FunctionFragment
    'MIN_STATUS_DURATION()': FunctionFragment
    'MIN_THRESHOLD()': FunctionFragment
    'cancelVoteByRelayer(uint256,address,uint256,bytes,bytes32)': FunctionFragment
    'cancelVoteByVoter(uint256)': FunctionFragment
    'challengeVoters(uint256,address[])': FunctionFragment
    'getGovParamsProvider()': FunctionFragment
    'getLeadingChoice(uint256)': FunctionFragment
    'getLimitBlockOfProposal(uint256)': FunctionFragment
    'getProposalBasicData(uint256)': FunctionFragment
    'getVoterData(uint256,address)': FunctionFragment
    'getVotesData(uint256)': FunctionFragment
    'newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)': FunctionFragment
    'resolveProposal(uint256)': FunctionFragment
    'submitVoteByRelayer(uint256,uint256,address,address,uint256,bytes,bytes32)': FunctionFragment
    'submitVoteByVoter(uint256,uint256,address)': FunctionFragment
    'tryToMoveToValidating(uint256)': FunctionFragment
    'validateRelayAction(bytes32,bytes32,bytes,address,uint256,uint256)': FunctionFragment
    'verifyNonce(uint256,address,uint256)': FunctionFragment
    'verifyParamsConsistencyAndSignature(bytes32,bytes32,bytes,address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'COUNT_CHOICES',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_MAXMOVESTOVOTINGALLOWED',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MIN_MAXMOVESTOVOTINGALLOWED',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MIN_STATUS_DURATION',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MIN_THRESHOLD',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'cancelVoteByRelayer',
    values: [BigNumberish, string, BigNumberish, BytesLike, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'cancelVoteByVoter',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'challengeVoters',
    values: [BigNumberish, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getGovParamsProvider',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLeadingChoice',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getLimitBlockOfProposal',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getProposalBasicData',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVoterData',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getVotesData',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'newProposal',
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'resolveProposal',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'submitVoteByRelayer',
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'submitVoteByVoter',
    values: [BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'tryToMoveToValidating',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'validateRelayAction',
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'verifyNonce',
    values: [BigNumberish, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'verifyParamsConsistencyAndSignature',
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string

  decodeFunctionResult(
    functionFragment: 'COUNT_CHOICES',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAX_MAXMOVESTOVOTINGALLOWED',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MIN_MAXMOVESTOVOTINGALLOWED',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MIN_STATUS_DURATION',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MIN_THRESHOLD',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'cancelVoteByRelayer',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'cancelVoteByVoter',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'challengeVoters',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getGovParamsProvider',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLeadingChoice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLimitBlockOfProposal',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getProposalBasicData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getVoterData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getVotesData',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'newProposal', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'resolveProposal',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'submitVoteByRelayer',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'submitVoteByVoter',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'tryToMoveToValidating',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'validateRelayAction',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'verifyNonce', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'verifyParamsConsistencyAndSignature',
    data: BytesLike
  ): Result

  events: {
    'AbstainWins(uint256,uint256,uint256,uint256)': EventFragment
    'NoWins(uint256,uint256,uint256,uint256)': EventFragment
    'ProposalCreated(uint256,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256,address)': EventFragment
    'StatusChangeToExecuted(uint256)': EventFragment
    'StatusChangeToValidating(uint256)': EventFragment
    'StatusChangeToVoting(uint256,uint256)': EventFragment
    'VoteCancelled(uint256,address,uint256,address,uint256,uint256,uint256)': EventFragment
    'VoteEmitted(uint256,address,uint256,address,uint256,uint256)': EventFragment
    'YesWins(uint256,uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AbstainWins'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NoWins'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProposalCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StatusChangeToExecuted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StatusChangeToValidating'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StatusChangeToVoting'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VoteCancelled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VoteEmitted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'YesWins'): EventFragment
}

export class AaveProtoGovernance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: AaveProtoGovernanceInterface

  functions: {
    COUNT_CHOICES(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'COUNT_CHOICES()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    MAX_MAXMOVESTOVOTINGALLOWED(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'MAX_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    MIN_MAXMOVESTOVOTINGALLOWED(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'MIN_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    MIN_STATUS_DURATION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'MIN_STATUS_DURATION()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    MIN_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'MIN_THRESHOLD()'(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    cancelVoteByRelayer(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'cancelVoteByRelayer(uint256,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'cancelVoteByVoter(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'challengeVoters(uint256,address[])'(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getGovParamsProvider(
      overrides?: CallOverrides
    ): Promise<{
      _govParamsProvider: string
      0: string
    }>

    'getGovParamsProvider()'(
      overrides?: CallOverrides
    ): Promise<{
      _govParamsProvider: string
      0: string
    }>

    getLeadingChoice(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    'getLeadingChoice(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber
    }>

    getLimitBlockOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _limitBlockProposal: BigNumber
      0: BigNumber
    }>

    'getLimitBlockOfProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _limitBlockProposal: BigNumber
      0: BigNumber
    }>

    getProposalBasicData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _totalVotes: BigNumber
      _threshold: BigNumber
      _maxMovesToVotingAllowed: BigNumber
      _movesToVoting: BigNumber
      _votingBlocksDuration: BigNumber
      _validatingBlocksDuration: BigNumber
      _currentStatusInitBlock: BigNumber
      _initProposalBlock: BigNumber
      _proposalStatus: BigNumber
      _proposalExecutor: string
      _proposalType: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
      5: BigNumber
      6: BigNumber
      7: BigNumber
      8: BigNumber
      9: string
      10: string
    }>

    'getProposalBasicData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _totalVotes: BigNumber
      _threshold: BigNumber
      _maxMovesToVotingAllowed: BigNumber
      _movesToVoting: BigNumber
      _votingBlocksDuration: BigNumber
      _validatingBlocksDuration: BigNumber
      _currentStatusInitBlock: BigNumber
      _initProposalBlock: BigNumber
      _proposalStatus: BigNumber
      _proposalExecutor: string
      _proposalType: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
      5: BigNumber
      6: BigNumber
      7: BigNumber
      8: BigNumber
      9: string
      10: string
    }>

    getVoterData(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      _vote: BigNumber
      _weight: BigNumber
      _balance: BigNumber
      _nonce: BigNumber
      _asset: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: string
    }>

    'getVoterData(uint256,address)'(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      _vote: BigNumber
      _weight: BigNumber
      _balance: BigNumber
      _nonce: BigNumber
      _asset: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: string
    }>

    getVotesData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber]
    }>

    'getVotesData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber]
    }>

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)'(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'resolveProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    submitVoteByRelayer(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'submitVoteByRelayer(uint256,uint256,address,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'submitVoteByVoter(uint256,uint256,address)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'tryToMoveToValidating(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    validateRelayAction(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void
    }>

    'validateRelayAction(bytes32,bytes32,bytes,address,uint256,uint256)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void
    }>

    verifyNonce(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void
    }>

    'verifyNonce(uint256,address,uint256)'(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void
    }>

    verifyParamsConsistencyAndSignature(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void
    }>

    'verifyParamsConsistencyAndSignature(bytes32,bytes32,bytes,address)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: void
    }>
  }

  COUNT_CHOICES(overrides?: CallOverrides): Promise<BigNumber>

  'COUNT_CHOICES()'(overrides?: CallOverrides): Promise<BigNumber>

  MAX_MAXMOVESTOVOTINGALLOWED(overrides?: CallOverrides): Promise<BigNumber>

  'MAX_MAXMOVESTOVOTINGALLOWED()'(overrides?: CallOverrides): Promise<BigNumber>

  MIN_MAXMOVESTOVOTINGALLOWED(overrides?: CallOverrides): Promise<BigNumber>

  'MIN_MAXMOVESTOVOTINGALLOWED()'(overrides?: CallOverrides): Promise<BigNumber>

  MIN_STATUS_DURATION(overrides?: CallOverrides): Promise<BigNumber>

  'MIN_STATUS_DURATION()'(overrides?: CallOverrides): Promise<BigNumber>

  MIN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>

  'MIN_THRESHOLD()'(overrides?: CallOverrides): Promise<BigNumber>

  cancelVoteByRelayer(
    _proposalId: BigNumberish,
    _voter: string,
    _nonce: BigNumberish,
    _signature: BytesLike,
    _paramsHashByVoter: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'cancelVoteByRelayer(uint256,address,uint256,bytes,bytes32)'(
    _proposalId: BigNumberish,
    _voter: string,
    _nonce: BigNumberish,
    _signature: BytesLike,
    _paramsHashByVoter: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  cancelVoteByVoter(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'cancelVoteByVoter(uint256)'(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  challengeVoters(
    _proposalId: BigNumberish,
    _voters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'challengeVoters(uint256,address[])'(
    _proposalId: BigNumberish,
    _voters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getGovParamsProvider(overrides?: CallOverrides): Promise<string>

  'getGovParamsProvider()'(overrides?: CallOverrides): Promise<string>

  getLeadingChoice(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getLeadingChoice(uint256)'(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getLimitBlockOfProposal(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getLimitBlockOfProposal(uint256)'(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getProposalBasicData(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    _totalVotes: BigNumber
    _threshold: BigNumber
    _maxMovesToVotingAllowed: BigNumber
    _movesToVoting: BigNumber
    _votingBlocksDuration: BigNumber
    _validatingBlocksDuration: BigNumber
    _currentStatusInitBlock: BigNumber
    _initProposalBlock: BigNumber
    _proposalStatus: BigNumber
    _proposalExecutor: string
    _proposalType: string
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
    4: BigNumber
    5: BigNumber
    6: BigNumber
    7: BigNumber
    8: BigNumber
    9: string
    10: string
  }>

  'getProposalBasicData(uint256)'(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    _totalVotes: BigNumber
    _threshold: BigNumber
    _maxMovesToVotingAllowed: BigNumber
    _movesToVoting: BigNumber
    _votingBlocksDuration: BigNumber
    _validatingBlocksDuration: BigNumber
    _currentStatusInitBlock: BigNumber
    _initProposalBlock: BigNumber
    _proposalStatus: BigNumber
    _proposalExecutor: string
    _proposalType: string
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
    4: BigNumber
    5: BigNumber
    6: BigNumber
    7: BigNumber
    8: BigNumber
    9: string
    10: string
  }>

  getVoterData(
    _proposalId: BigNumberish,
    _voterAddress: string,
    overrides?: CallOverrides
  ): Promise<{
    _vote: BigNumber
    _weight: BigNumber
    _balance: BigNumber
    _nonce: BigNumber
    _asset: string
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
    4: string
  }>

  'getVoterData(uint256,address)'(
    _proposalId: BigNumberish,
    _voterAddress: string,
    overrides?: CallOverrides
  ): Promise<{
    _vote: BigNumber
    _weight: BigNumber
    _balance: BigNumber
    _nonce: BigNumber
    _asset: string
    0: BigNumber
    1: BigNumber
    2: BigNumber
    3: BigNumber
    4: string
  }>

  getVotesData(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>

  'getVotesData(uint256)'(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>

  newProposal(
    _proposalType: BytesLike,
    _ipfsHash: BytesLike,
    _threshold: BigNumberish,
    _proposalExecutor: string,
    _votingBlocksDuration: BigNumberish,
    _validatingBlocksDuration: BigNumberish,
    _maxMovesToVotingAllowed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)'(
    _proposalType: BytesLike,
    _ipfsHash: BytesLike,
    _threshold: BigNumberish,
    _proposalExecutor: string,
    _votingBlocksDuration: BigNumberish,
    _validatingBlocksDuration: BigNumberish,
    _maxMovesToVotingAllowed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  resolveProposal(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'resolveProposal(uint256)'(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  submitVoteByRelayer(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    _voter: string,
    _asset: string,
    _nonce: BigNumberish,
    _signature: BytesLike,
    _paramsHashByVoter: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'submitVoteByRelayer(uint256,uint256,address,address,uint256,bytes,bytes32)'(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    _voter: string,
    _asset: string,
    _nonce: BigNumberish,
    _signature: BytesLike,
    _paramsHashByVoter: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  submitVoteByVoter(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'submitVoteByVoter(uint256,uint256,address)'(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  tryToMoveToValidating(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'tryToMoveToValidating(uint256)'(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  validateRelayAction(
    _paramsHashByRelayer: BytesLike,
    _paramsHashBySigner: BytesLike,
    _signature: BytesLike,
    _signer: string,
    _proposalId: BigNumberish,
    _relayerNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  'validateRelayAction(bytes32,bytes32,bytes,address,uint256,uint256)'(
    _paramsHashByRelayer: BytesLike,
    _paramsHashBySigner: BytesLike,
    _signature: BytesLike,
    _signer: string,
    _proposalId: BigNumberish,
    _relayerNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  verifyNonce(
    _proposalId: BigNumberish,
    _voter: string,
    _relayerNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  'verifyNonce(uint256,address,uint256)'(
    _proposalId: BigNumberish,
    _voter: string,
    _relayerNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  verifyParamsConsistencyAndSignature(
    _paramsHashByRelayer: BytesLike,
    _paramsHashBySigner: BytesLike,
    _signature: BytesLike,
    _signer: string,
    overrides?: CallOverrides
  ): Promise<void>

  'verifyParamsConsistencyAndSignature(bytes32,bytes32,bytes,address)'(
    _paramsHashByRelayer: BytesLike,
    _paramsHashBySigner: BytesLike,
    _signature: BytesLike,
    _signer: string,
    overrides?: CallOverrides
  ): Promise<void>

  callStatic: {
    COUNT_CHOICES(overrides?: CallOverrides): Promise<BigNumber>

    'COUNT_CHOICES()'(overrides?: CallOverrides): Promise<BigNumber>

    MAX_MAXMOVESTOVOTINGALLOWED(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    MIN_MAXMOVESTOVOTINGALLOWED(overrides?: CallOverrides): Promise<BigNumber>

    'MIN_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    MIN_STATUS_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    'MIN_STATUS_DURATION()'(overrides?: CallOverrides): Promise<BigNumber>

    MIN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>

    'MIN_THRESHOLD()'(overrides?: CallOverrides): Promise<BigNumber>

    cancelVoteByRelayer(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'cancelVoteByRelayer(uint256,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'cancelVoteByVoter(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: CallOverrides
    ): Promise<void>

    'challengeVoters(uint256,address[])'(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: CallOverrides
    ): Promise<void>

    getGovParamsProvider(overrides?: CallOverrides): Promise<string>

    'getGovParamsProvider()'(overrides?: CallOverrides): Promise<string>

    getLeadingChoice(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLeadingChoice(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLimitBlockOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLimitBlockOfProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getProposalBasicData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _totalVotes: BigNumber
      _threshold: BigNumber
      _maxMovesToVotingAllowed: BigNumber
      _movesToVoting: BigNumber
      _votingBlocksDuration: BigNumber
      _validatingBlocksDuration: BigNumber
      _currentStatusInitBlock: BigNumber
      _initProposalBlock: BigNumber
      _proposalStatus: BigNumber
      _proposalExecutor: string
      _proposalType: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
      5: BigNumber
      6: BigNumber
      7: BigNumber
      8: BigNumber
      9: string
      10: string
    }>

    'getProposalBasicData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _totalVotes: BigNumber
      _threshold: BigNumber
      _maxMovesToVotingAllowed: BigNumber
      _movesToVoting: BigNumber
      _votingBlocksDuration: BigNumber
      _validatingBlocksDuration: BigNumber
      _currentStatusInitBlock: BigNumber
      _initProposalBlock: BigNumber
      _proposalStatus: BigNumber
      _proposalExecutor: string
      _proposalType: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: BigNumber
      5: BigNumber
      6: BigNumber
      7: BigNumber
      8: BigNumber
      9: string
      10: string
    }>

    getVoterData(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      _vote: BigNumber
      _weight: BigNumber
      _balance: BigNumber
      _nonce: BigNumber
      _asset: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: string
    }>

    'getVoterData(uint256,address)'(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      _vote: BigNumber
      _weight: BigNumber
      _balance: BigNumber
      _nonce: BigNumber
      _asset: string
      0: BigNumber
      1: BigNumber
      2: BigNumber
      3: BigNumber
      4: string
    }>

    getVotesData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>

    'getVotesData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)'(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'resolveProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    submitVoteByRelayer(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'submitVoteByRelayer(uint256,uint256,address,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>

    'submitVoteByVoter(uint256,uint256,address)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'tryToMoveToValidating(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    validateRelayAction(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'validateRelayAction(bytes32,bytes32,bytes,address,uint256,uint256)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    verifyNonce(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'verifyNonce(uint256,address,uint256)'(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    verifyParamsConsistencyAndSignature(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>

    'verifyParamsConsistencyAndSignature(bytes32,bytes32,bytes,address)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    AbstainWins(
      proposalId: BigNumberish | null,
      abstainVotingPower: null,
      yesVotingPower: null,
      noVotingPower: null
    ): EventFilter

    NoWins(
      proposalId: BigNumberish | null,
      abstainVotingPower: null,
      yesVotingPower: null,
      noVotingPower: null
    ): EventFilter

    ProposalCreated(
      proposalId: BigNumberish | null,
      ipfsHash: BytesLike | null,
      proposalType: BytesLike | null,
      propositionPowerOfCreator: null,
      threshold: null,
      maxMovesToVotingAllowed: null,
      votingBlocksDuration: null,
      validatingBlocksDuration: null,
      proposalExecutor: null
    ): EventFilter

    StatusChangeToExecuted(proposalId: BigNumberish | null): EventFilter

    StatusChangeToValidating(proposalId: BigNumberish | null): EventFilter

    StatusChangeToVoting(
      proposalId: BigNumberish | null,
      movesToVoting: null
    ): EventFilter

    VoteCancelled(
      proposalId: BigNumberish | null,
      voter: string | null,
      vote: BigNumberish | null,
      asset: null,
      weight: null,
      balance: null,
      proposalStatusBefore: null
    ): EventFilter

    VoteEmitted(
      proposalId: BigNumberish | null,
      voter: string | null,
      vote: BigNumberish | null,
      asset: null,
      weight: null,
      balance: null
    ): EventFilter

    YesWins(
      proposalId: BigNumberish | null,
      abstainVotingPower: null,
      yesVotingPower: null,
      noVotingPower: null
    ): EventFilter
  }

  estimateGas: {
    COUNT_CHOICES(overrides?: CallOverrides): Promise<BigNumber>

    'COUNT_CHOICES()'(overrides?: CallOverrides): Promise<BigNumber>

    MAX_MAXMOVESTOVOTINGALLOWED(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    MIN_MAXMOVESTOVOTINGALLOWED(overrides?: CallOverrides): Promise<BigNumber>

    'MIN_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    MIN_STATUS_DURATION(overrides?: CallOverrides): Promise<BigNumber>

    'MIN_STATUS_DURATION()'(overrides?: CallOverrides): Promise<BigNumber>

    MIN_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>

    'MIN_THRESHOLD()'(overrides?: CallOverrides): Promise<BigNumber>

    cancelVoteByRelayer(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'cancelVoteByRelayer(uint256,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'cancelVoteByVoter(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'challengeVoters(uint256,address[])'(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    getGovParamsProvider(overrides?: CallOverrides): Promise<BigNumber>

    'getGovParamsProvider()'(overrides?: CallOverrides): Promise<BigNumber>

    getLeadingChoice(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLeadingChoice(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLimitBlockOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLimitBlockOfProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getProposalBasicData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getProposalBasicData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVoterData(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getVoterData(uint256,address)'(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVotesData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getVotesData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)'(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'resolveProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    submitVoteByRelayer(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'submitVoteByRelayer(uint256,uint256,address,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'submitVoteByVoter(uint256,uint256,address)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'tryToMoveToValidating(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    validateRelayAction(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'validateRelayAction(bytes32,bytes32,bytes,address,uint256,uint256)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    verifyNonce(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'verifyNonce(uint256,address,uint256)'(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    verifyParamsConsistencyAndSignature(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'verifyParamsConsistencyAndSignature(bytes32,bytes32,bytes,address)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    COUNT_CHOICES(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'COUNT_CHOICES()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAX_MAXMOVESTOVOTINGALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'MAX_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    MIN_MAXMOVESTOVOTINGALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'MIN_MAXMOVESTOVOTINGALLOWED()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    MIN_STATUS_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'MIN_STATUS_DURATION()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    MIN_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'MIN_THRESHOLD()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    cancelVoteByRelayer(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'cancelVoteByRelayer(uint256,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _voter: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    cancelVoteByVoter(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'cancelVoteByVoter(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    challengeVoters(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'challengeVoters(uint256,address[])'(
      _proposalId: BigNumberish,
      _voters: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getGovParamsProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getGovParamsProvider()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLeadingChoice(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLeadingChoice(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLimitBlockOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLimitBlockOfProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getProposalBasicData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getProposalBasicData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVoterData(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getVoterData(uint256,address)'(
      _proposalId: BigNumberish,
      _voterAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVotesData(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getVotesData(uint256)'(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    newProposal(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'newProposal(bytes32,bytes32,uint256,address,uint256,uint256,uint256)'(
      _proposalType: BytesLike,
      _ipfsHash: BytesLike,
      _threshold: BigNumberish,
      _proposalExecutor: string,
      _votingBlocksDuration: BigNumberish,
      _validatingBlocksDuration: BigNumberish,
      _maxMovesToVotingAllowed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    resolveProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'resolveProposal(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    submitVoteByRelayer(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'submitVoteByRelayer(uint256,uint256,address,address,uint256,bytes,bytes32)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _voter: string,
      _asset: string,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _paramsHashByVoter: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    submitVoteByVoter(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'submitVoteByVoter(uint256,uint256,address)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    tryToMoveToValidating(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'tryToMoveToValidating(uint256)'(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    validateRelayAction(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'validateRelayAction(bytes32,bytes32,bytes,address,uint256,uint256)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      _proposalId: BigNumberish,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    verifyNonce(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'verifyNonce(uint256,address,uint256)'(
      _proposalId: BigNumberish,
      _voter: string,
      _relayerNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    verifyParamsConsistencyAndSignature(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'verifyParamsConsistencyAndSignature(bytes32,bytes32,bytes,address)'(
      _paramsHashByRelayer: BytesLike,
      _paramsHashBySigner: BytesLike,
      _signature: BytesLike,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
